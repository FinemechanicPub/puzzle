# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Build complete application

on: workflow_dispatch

# Defines two custom environment variables for the workflow.
# These are used for the Container registry domain,
# and a name for the Docker image that this workflow builds.
env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

jobs:
  build-frontend:
    defaults:
      run:
        working-directory: frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4.3.4
      with:
        # Artifact name
        name: dist
        # A file, directory or wildcard pattern that describes what to upload
        path: frontend/dist
        # The desired behavior if no files are found using the provided path.
        if-no-files-found: error
        # If true, an artifact with a matching name will be deleted before a new one is uploaded. If false, the action will fail if an artifact for the given name already exists. Does not fail if the artifact does not exist.
        overwrite: true

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: build-frontend
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    # GITHUB_TOKEN автоматически создается GitHub перед началом выполнения скрипта
    # https://docs.github.com/en/actions/security-guides/automatic-token-authentication
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      actions: read
    # 
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    # Uses the `docker/login-action` action to log in to the Container registry
    # using the account and password that will publish the packages.
    # Once published, the packages are scoped to the account defined here.
    - name: Log in to the Container registry
      uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Download frontend artifact
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: backend/dist
    # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about)
    # to extract tags and labels that will be applied to the specified image.
    # The `id` "meta" allows the output of this step to be referenced in a subsequent step.
    # The `images` value provides the base name for the tags and labels.
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    # This step uses the `docker/build-push-action` action to build the image,
    # based on your repository's `Dockerfile`. If the build succeeds,
    # it pushes the image to GitHub Packages.
    # It uses the `context` parameter to define the build's context as the set of files
    # located in the specified path. For more information,
    # see "[Usage](https://github.com/docker/build-push-action#usage)"
    # in the README of the `docker/build-push-action` repository.
    # It uses the `tags` and `labels` parameters to tag and label
    # the image with the output from the "meta" step.
    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      with:
        context: backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    
    # This step generates an artifact attestation for the image,
    # which is an unforgeable statement about where and how it was built.
    # It increases supply chain security for people who consume the image.
    # For more information, see 
    # "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)." 
    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
        subject-digest: ${{ steps.push.outputs.digest }}
        push-to-registry: true
