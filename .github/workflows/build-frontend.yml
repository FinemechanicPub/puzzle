# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Build frontend

on: workflow_dispatch

# Defines two custom environment variables for the workflow.
# These are used for the Container registry domain,
# and a name for the Docker image that this workflow builds.
env:
    REGISTRY: ghcr.io
    FRONTEND_IMAGE_NAME: ${{ github.repository }}-frontend

jobs:
  build-frontend:
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    # GITHUB_TOKEN автоматически создается GitHub перед началом выполнения скрипта
    # https://docs.github.com/en/actions/security-guides/automatic-token-authentication
    permissions:
      contents: read
      packages: write
      id-token: write
    defaults:
      run:
        working-directory: frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
    # Uses the `docker/login-action` action to log in to the Container registry
    # using the account and password that will publish the packages.
    # Once published, the packages are scoped to the account defined here.
    - name: Log in to the Container registry
      uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
        images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
    # This step uses the `docker/build-push-action` action to build the image,
    # based on your repository's `Dockerfile`. If the build succeeds,
    # it pushes the image to GitHub Packages.
    # It uses the `context` parameter to define the build's context as the set of files
    # located in the specified path. For more information,
    # see "[Usage](https://github.com/docker/build-push-action#usage)"
    # in the README of the `docker/build-push-action` repository.
    # It uses the `tags` and `labels` parameters to tag and label
    # the image with the output from the "meta" step.
    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      with:
        context: frontend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}