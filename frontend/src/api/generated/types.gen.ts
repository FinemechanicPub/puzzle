// This file is auto-generated by @hey-api/openapi-ts

export type CreateGameRequest = {
    title?: string;
    width: number;
    height: number;
    pieces: Array<PieceColor>;
};

export type ErrorModel = {
    detail: string | {
    [key: string]: (string);
};
};

export type GameLongResponse = {
    id: number;
    title: string;
    width: number;
    height: number;
    pieces: Array<GamePieceRotationsResponse>;
};

export type GamePieceRotationsResponse = {
    id: number;
    name: string;
    color: number;
    rotations: Array<Rotation>;
};

export type GameResponseBase = {
    id: number;
    title: string;
    width: number;
    height: number;
};

export type GameStatus = 1 | 2 | 3;

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type HintRequest = {
    game_id: number;
    pieces: Array<PiecePlacement>;
};

export type HintResponse = {
    status: GameStatus;
    hint: PiecePlacement | null;
};

export type LoginRequest = {
    email: string;
    password: string;
};

export type PieceBase = {
    name: string;
    points: Array<[
        number,
        number
    ]>;
};

export type PieceColor = {
    piece_id: number;
    color: number | string;
};

export type PieceGetResponse = {
    name: string;
    points: Array<[
        number,
        number
    ]>;
    id: number;
    readonly size: number;
};

export type PiecePlacement = {
    piece_id: number;
    rotation_id: number;
    position: number;
};

export type Rotation = {
    id: number;
    points: Array<[
        number,
        number
    ]>;
};

export type UserRead = {
    id: number;
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    is_verified?: boolean;
};

export type UserUpdate = {
    password?: string | null;
    email?: string | null;
    is_active?: boolean | null;
    is_superuser?: boolean | null;
    is_verified?: boolean | null;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type MainPageSuggestionResponse = Array<GameResponseBase>;

export type GamesGetGameData = {
    gameId: number;
};

export type GamesGetGameResponse = GameLongResponse;

export type GamesRemoveGameData = {
    gameId: number;
};

export type GamesRemoveGameResponse = void;

export type GamesListGamesData = {
    limit?: number;
    offset?: number;
};

export type GamesListGamesResponse = Array<GameResponseBase>;

export type GamesCreateGameData = {
    requestBody: CreateGameRequest;
};

export type GamesCreateGameResponse = GameResponseBase;

export type GamesGameThumbnailData = {
    gameId: number;
};

export type GamesGameThumbnailResponse = unknown;

export type PiecesGetPieceData = {
    pieceId: number;
};

export type PiecesGetPieceResponse = PieceGetResponse;

export type PiecesRemovePieceData = {
    pieceId: number;
};

export type PiecesRemovePieceResponse = void;

export type PiecesListPiecesData = {
    limit?: number;
    offset?: number;
};

export type PiecesListPiecesResponse = Array<PieceGetResponse>;

export type PiecesCreatePieceData = {
    requestBody: PieceBase;
};

export type PiecesCreatePieceResponse = PieceGetResponse;

export type GamesHintData = {
    requestBody: HintRequest;
};

export type GamesHintResponse = HintResponse;

export type AuthenticationLoginData = {
    requestBody: LoginRequest;
};

export type AuthenticationLoginResponse = unknown;

export type AuthenticationLogoutResponse = unknown;

export type UsersUsersCurrentUserResponse = UserRead;

export type UsersUsersPatchCurrentUserData = {
    requestBody: UserUpdate;
};

export type UsersUsersPatchCurrentUserResponse = UserRead;

export type UsersUsersUserData = {
    id: string;
};

export type UsersUsersUserResponse = UserRead;

export type UsersUsersPatchUserData = {
    id: string;
    requestBody: UserUpdate;
};

export type UsersUsersPatchUserResponse = UserRead;

export type UsersUsersDeleteUserData = {
    id: string;
};

export type UsersUsersDeleteUserResponse = void;

export type $OpenApiTs = {
    '/api/v1/cover/suggestion/': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: Array<GameResponseBase>;
            };
        };
    };
    '/api/v1/games/{game_id}/': {
        get: {
            req: GamesGetGameData;
            res: {
                /**
                 * Successful Response
                 */
                200: GameLongResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: GamesRemoveGameData;
            res: {
                /**
                 * Successful Response
                 */
                204: void;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/games/': {
        get: {
            req: GamesListGamesData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<GameResponseBase>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        post: {
            req: GamesCreateGameData;
            res: {
                /**
                 * Successful Response
                 */
                201: GameResponseBase;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/games/{game_id}/thumbnail/': {
        get: {
            req: GamesGameThumbnailData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Game not found
                 */
                404: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/pieces/piece_id/': {
        get: {
            req: PiecesGetPieceData;
            res: {
                /**
                 * Successful Response
                 */
                200: PieceGetResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: PiecesRemovePieceData;
            res: {
                /**
                 * Successful Response
                 */
                204: void;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/pieces/': {
        get: {
            req: PiecesListPiecesData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<PieceGetResponse>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        post: {
            req: PiecesCreatePieceData;
            res: {
                /**
                 * Successful Response
                 */
                201: PieceGetResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/play/hint/': {
        put: {
            req: GamesHintData;
            res: {
                /**
                 * Successful Response
                 */
                200: HintResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/auth/login': {
        post: {
            req: AuthenticationLoginData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/auth/logout': {
        post: {
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
            };
        };
    };
    '/api/v1/users/me': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: UserRead;
                /**
                 * Missing token or inactive user.
                 */
                401: unknown;
            };
        };
        patch: {
            req: UsersUsersPatchCurrentUserData;
            res: {
                /**
                 * Successful Response
                 */
                200: UserRead;
                /**
                 * Bad Request
                 */
                400: ErrorModel;
                /**
                 * Missing token or inactive user.
                 */
                401: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/users/{id}': {
        get: {
            req: UsersUsersUserData;
            res: {
                /**
                 * Successful Response
                 */
                200: UserRead;
                /**
                 * Missing token or inactive user.
                 */
                401: unknown;
                /**
                 * Not a superuser.
                 */
                403: unknown;
                /**
                 * The user does not exist.
                 */
                404: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        patch: {
            req: UsersUsersPatchUserData;
            res: {
                /**
                 * Successful Response
                 */
                200: UserRead;
                /**
                 * Bad Request
                 */
                400: ErrorModel;
                /**
                 * Missing token or inactive user.
                 */
                401: unknown;
                /**
                 * Not a superuser.
                 */
                403: unknown;
                /**
                 * The user does not exist.
                 */
                404: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: UsersUsersDeleteUserData;
            res: {
                /**
                 * Successful Response
                 */
                204: void;
                /**
                 * Missing token or inactive user.
                 */
                401: unknown;
                /**
                 * Not a superuser.
                 */
                403: unknown;
                /**
                 * The user does not exist.
                 */
                404: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
};