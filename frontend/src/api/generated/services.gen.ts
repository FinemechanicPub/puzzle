// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { MainPageSuggestionData, MainPageSuggestionResponse, GamesGetGameData, GamesGetGameResponse, GamesRemoveGameData, GamesRemoveGameResponse, GamesListGamesData, GamesListGamesResponse, GamesCreateGameData, GamesCreateGameResponse, GamesGameThumbnailData, GamesGameThumbnailResponse, PiecesGetPieceData, PiecesGetPieceResponse, PiecesRemovePieceData, PiecesRemovePieceResponse, PiecesListPiecesData, PiecesListPiecesResponse, PiecesCreatePieceData, PiecesCreatePieceResponse, GamesHintData, GamesHintResponse, AuthenticationLoginData, AuthenticationLoginResponse, AuthenticationLogoutResponse, UsersUsersCurrentUserResponse, UsersUsersPatchCurrentUserData, UsersUsersPatchCurrentUserResponse, UsersUsersUserData, UsersUsersUserResponse, UsersUsersPatchUserData, UsersUsersPatchUserResponse, UsersUsersDeleteUserData, UsersUsersDeleteUserResponse } from './types.gen';

/**
 * Suggestion
 * @param data The data for the request.
 * @param data.difficulty
 * @returns GameResponseBase Successful Response
 * @throws ApiError
 */
export const mainPageSuggestion = (data: MainPageSuggestionData = {}): CancelablePromise<MainPageSuggestionResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/cover/suggestion/',
    query: {
        difficulty: data.difficulty
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Game
 * @param data The data for the request.
 * @param data.gameId
 * @returns GameLongResponse Successful Response
 * @throws ApiError
 */
export const gamesGetGame = (data: GamesGetGameData): CancelablePromise<GamesGetGameResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/games/{game_id}/',
    path: {
        game_id: data.gameId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Remove Game
 * @param data The data for the request.
 * @param data.gameId
 * @returns void Successful Response
 * @throws ApiError
 */
export const gamesRemoveGame = (data: GamesRemoveGameData): CancelablePromise<GamesRemoveGameResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/v1/games/{game_id}/',
    path: {
        game_id: data.gameId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Games
 * @param data The data for the request.
 * @param data.shuffle
 * @param data.offset
 * @param data.limit
 * @param data.height
 * @param data.width
 * @returns GameResponseBase Successful Response
 * @throws ApiError
 */
export const gamesListGames = (data: GamesListGamesData = {}): CancelablePromise<GamesListGamesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/games/',
    query: {
        shuffle: data.shuffle,
        offset: data.offset,
        limit: data.limit,
        height: data.height,
        width: data.width
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Game
 * @param data The data for the request.
 * @param data.requestBody
 * @returns GameResponseBase Successful Response
 * @throws ApiError
 */
export const gamesCreateGame = (data: GamesCreateGameData): CancelablePromise<GamesCreateGameResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/games/',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Game Thumbnail
 * @param data The data for the request.
 * @param data.gameId
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const gamesGameThumbnail = (data: GamesGameThumbnailData): CancelablePromise<GamesGameThumbnailResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/games/{game_id}/thumbnail/',
    path: {
        game_id: data.gameId
    },
    errors: {
        404: 'Game not found',
        422: 'Validation Error'
    }
}); };

/**
 * Get Piece
 * @param data The data for the request.
 * @param data.pieceId
 * @returns PieceGetResponse Successful Response
 * @throws ApiError
 */
export const piecesGetPiece = (data: PiecesGetPieceData): CancelablePromise<PiecesGetPieceResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/pieces/piece_id/',
    query: {
        piece_id: data.pieceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Remove Piece
 * @param data The data for the request.
 * @param data.pieceId
 * @returns void Successful Response
 * @throws ApiError
 */
export const piecesRemovePiece = (data: PiecesRemovePieceData): CancelablePromise<PiecesRemovePieceResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/v1/pieces/piece_id/',
    query: {
        piece_id: data.pieceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Pieces
 * @param data The data for the request.
 * @param data.offset
 * @param data.limit
 * @returns PieceGetResponse Successful Response
 * @throws ApiError
 */
export const piecesListPieces = (data: PiecesListPiecesData = {}): CancelablePromise<PiecesListPiecesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/pieces/',
    query: {
        offset: data.offset,
        limit: data.limit
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Piece
 * @param data The data for the request.
 * @param data.requestBody
 * @returns PieceGetResponse Successful Response
 * @throws ApiError
 */
export const piecesCreatePiece = (data: PiecesCreatePieceData): CancelablePromise<PiecesCreatePieceResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/pieces/',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Hint
 * @param data The data for the request.
 * @param data.requestBody
 * @returns HintResponse Successful Response
 * @throws ApiError
 */
export const gamesHint = (data: GamesHintData): CancelablePromise<GamesHintResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/v1/play/hint/',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Login
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const authenticationLogin = (data: AuthenticationLoginData): CancelablePromise<AuthenticationLoginResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/auth/login',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Logout
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const authenticationLogout = (): CancelablePromise<AuthenticationLogoutResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/auth/logout'
}); };

/**
 * Users:Current User
 * @returns UserRead Successful Response
 * @throws ApiError
 */
export const usersUsersCurrentUser = (): CancelablePromise<UsersUsersCurrentUserResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/users/me',
    errors: {
        401: 'Missing token or inactive user.'
    }
}); };

/**
 * Users:Patch Current User
 * @param data The data for the request.
 * @param data.requestBody
 * @returns UserRead Successful Response
 * @throws ApiError
 */
export const usersUsersPatchCurrentUser = (data: UsersUsersPatchCurrentUserData): CancelablePromise<UsersUsersPatchCurrentUserResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/v1/users/me',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Missing token or inactive user.',
        422: 'Validation Error'
    }
}); };

/**
 * Users:User
 * @param data The data for the request.
 * @param data.id
 * @returns UserRead Successful Response
 * @throws ApiError
 */
export const usersUsersUser = (data: UsersUsersUserData): CancelablePromise<UsersUsersUserResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/users/{id}',
    path: {
        id: data.id
    },
    errors: {
        401: 'Missing token or inactive user.',
        403: 'Not a superuser.',
        404: 'The user does not exist.',
        422: 'Validation Error'
    }
}); };

/**
 * Users:Patch User
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns UserRead Successful Response
 * @throws ApiError
 */
export const usersUsersPatchUser = (data: UsersUsersPatchUserData): CancelablePromise<UsersUsersPatchUserResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/v1/users/{id}',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Missing token or inactive user.',
        403: 'Not a superuser.',
        404: 'The user does not exist.',
        422: 'Validation Error'
    }
}); };

/**
 * Users:Delete User
 * @param data The data for the request.
 * @param data.id
 * @returns void Successful Response
 * @throws ApiError
 */
export const usersUsersDeleteUser = (data: UsersUsersDeleteUserData): CancelablePromise<UsersUsersDeleteUserResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/v1/users/{id}',
    path: {
        id: data.id
    },
    errors: {
        401: 'Missing token or inactive user.',
        403: 'Not a superuser.',
        404: 'The user does not exist.',
        422: 'Validation Error'
    }
}); };